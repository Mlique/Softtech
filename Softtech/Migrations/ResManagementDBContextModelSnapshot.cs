// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Softtech.Data;

namespace Softtech.Migrations
{
    [DbContext(typeof(ResManagementDBContext))]
    partial class ResManagementDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Softtech.Models.AP", b =>
                {
                    b.Property<int>("Total")
                        .HasColumnType("int")
                        .HasColumnName("Total");

                    b.ToTable("AP");

                    b
                        .HasAnnotation("Relational:SqlQuery", "sp_AprC");
                });

            modelBuilder.Entity("Softtech.Models.AR", b =>
                {
                    b.Property<int>("Total")
                        .HasColumnType("int")
                        .HasColumnName("Total");

                    b
                        .HasAnnotation("Relational:SqlQuery", "sp_AprAppr");
                });

            modelBuilder.Entity("Softtech.Models.AU", b =>
                {
                    b.Property<int>("Total")
                        .HasColumnType("int")
                        .HasColumnName("Total");

                    b.ToTable("AU");

                    b
                        .HasAnnotation("Relational:SqlQuery", "sp_AugAppr");
                });

            modelBuilder.Entity("Softtech.Models.AUGU", b =>
                {
                    b.Property<int>("Total")
                        .HasColumnType("int")
                        .HasColumnName("Total");

                    b.ToTable("AUGU");

                    b
                        .HasAnnotation("Relational:SqlQuery", "sp_AugC");
                });

            modelBuilder.Entity("Softtech.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Softtech.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CellNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NextOfKinFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NextOfKinLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Relationship")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TblCityCityId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RoomId");

                    b.HasIndex("TblCityCityId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Softtech.Models.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("RoleId1");

                    b.HasIndex("UserId1");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Softtech.Models.Apr", b =>
                {
                    b.Property<int>("Total")
                        .HasColumnType("int")
                        .HasColumnName("Total");

                    b.ToTable("Apr");

                    b
                        .HasAnnotation("Relational:SqlQuery", "sp_AprStats");
                });

            modelBuilder.Entity("Softtech.Models.Aug", b =>
                {
                    b.Property<int>("Total")
                        .HasColumnType("int")
                        .HasColumnName("Total");

                    b.ToTable("Aug");

                    b
                        .HasAnnotation("Relational:SqlQuery", "sp_AugStats");
                });

            modelBuilder.Entity("Softtech.Models.Claim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tblClaims");
                });

            modelBuilder.Entity("Softtech.Models.DE", b =>
                {
                    b.Property<int>("Total")
                        .HasColumnType("int")
                        .HasColumnName("Total");

                    b.ToTable("DE");

                    b
                        .HasAnnotation("Relational:SqlQuery", "sp_DecAppr");
                });

            modelBuilder.Entity("Softtech.Models.DEC", b =>
                {
                    b.Property<int>("Total")
                        .HasColumnType("int")
                        .HasColumnName("Total");

                    b.ToTable("DEC");

                    b
                        .HasAnnotation("Relational:SqlQuery", "sp_DecC");
                });

            modelBuilder.Entity("Softtech.Models.Dec", b =>
                {
                    b.Property<int>("Total")
                        .HasColumnType("int")
                        .HasColumnName("Total");

                    b.ToTable("Dec");

                    b
                        .HasAnnotation("Relational:SqlQuery", "sp_DecStats");
                });

            modelBuilder.Entity("Softtech.Models.FE", b =>
                {
                    b.Property<int>("Total")
                        .HasColumnType("int")
                        .HasColumnName("Total");

                    b.ToTable("FE");

                    b
                        .HasAnnotation("Relational:SqlQuery", "sp_FebC");
                });

            modelBuilder.Entity("Softtech.Models.FR", b =>
                {
                    b.Property<int>("Total")
                        .HasColumnType("int")
                        .HasColumnName("Total");

                    b.ToTable("FR");

                    b
                        .HasAnnotation("Relational:SqlQuery", "sp_FebAppr");
                });

            modelBuilder.Entity("Softtech.Models.Feb", b =>
                {
                    b.Property<int>("Total")
                        .HasColumnType("int")
                        .HasColumnName("Total");

                    b.ToTable("Feb");

                    b
                        .HasAnnotation("Relational:SqlQuery", "sp_FebStats");
                });

            modelBuilder.Entity("Softtech.Models.JA", b =>
                {
                    b.Property<int>("Total")
                        .HasColumnType("int")
                        .HasColumnName("Total");

                    b.ToTable("JA");

                    b
                        .HasAnnotation("Relational:SqlQuery", "sp_JanC");
                });

            modelBuilder.Entity("Softtech.Models.JL", b =>
                {
                    b.Property<int>("Total")
                        .HasColumnType("int")
                        .HasColumnName("Total");

                    b.ToTable("JL");

                    b
                        .HasAnnotation("Relational:SqlQuery", "sp_JulAppr");
                });

            modelBuilder.Entity("Softtech.Models.JN", b =>
                {
                    b.Property<int>("Total")
                        .HasColumnType("int")
                        .HasColumnName("Total");

                    b.ToTable("JN");

                    b
                        .HasAnnotation("Relational:SqlQuery", "sp_JunC");
                });

            modelBuilder.Entity("Softtech.Models.JR", b =>
                {
                    b.Property<int>("Total")
                        .HasColumnType("int")
                        .HasColumnName("Total");

                    b.ToTable("JR");

                    b
                        .HasAnnotation("Relational:SqlQuery", "sp_JanAppr");
                });

            modelBuilder.Entity("Softtech.Models.JU", b =>
                {
                    b.Property<int>("Total")
                        .HasColumnType("int")
                        .HasColumnName("Total");

                    b.ToTable("JU");

                    b
                        .HasAnnotation("Relational:SqlQuery", "sp_JunAppr");
                });

            modelBuilder.Entity("Softtech.Models.JUL", b =>
                {
                    b.Property<int>("Total")
                        .HasColumnType("int")
                        .HasColumnName("Total");

                    b.ToTable("JUL");

                    b
                        .HasAnnotation("Relational:SqlQuery", "sp_JulC");
                });

            modelBuilder.Entity("Softtech.Models.Jan", b =>
                {
                    b.Property<int>("Total")
                        .HasColumnType("int")
                        .HasColumnName("Total");

                    b.ToTable("Jan");

                    b
                        .HasAnnotation("Relational:SqlQuery", "sp_JanStats");
                });

            modelBuilder.Entity("Softtech.Models.Jul", b =>
                {
                    b.Property<int>("Total")
                        .HasColumnType("int")
                        .HasColumnName("Total");

                    b.ToTable("Jul");

                    b
                        .HasAnnotation("Relational:SqlQuery", "sp_JulStats");
                });

            modelBuilder.Entity("Softtech.Models.Jun", b =>
                {
                    b.Property<int>("Total")
                        .HasColumnType("int")
                        .HasColumnName("Total");

                    b.ToTable("Jun");

                    b
                        .HasAnnotation("Relational:SqlQuery", "sp_JunStats");
                });

            modelBuilder.Entity("Softtech.Models.MA", b =>
                {
                    b.Property<int>("Total")
                        .HasColumnType("int")
                        .HasColumnName("Total");

                    b
                        .HasAnnotation("Relational:SqlQuery", "sp_MayAppr");
                });

            modelBuilder.Entity("Softtech.Models.MAR", b =>
                {
                    b.Property<int>("Total")
                        .HasColumnType("int")
                        .HasColumnName("Total");

                    b.ToTable("MAR");

                    b
                        .HasAnnotation("Relational:SqlQuery", "sp_MarC");
                });

            modelBuilder.Entity("Softtech.Models.MR", b =>
                {
                    b.Property<int>("Total")
                        .HasColumnType("int")
                        .HasColumnName("Total");

                    b.ToTable("MR");

                    b
                        .HasAnnotation("Relational:SqlQuery", "sp_MarAppr");
                });

            modelBuilder.Entity("Softtech.Models.MY", b =>
                {
                    b.Property<int>("Total")
                        .HasColumnType("int")
                        .HasColumnName("Total");

                    b.ToTable("MY");

                    b
                        .HasAnnotation("Relational:SqlQuery", "sp_MayC");
                });

            modelBuilder.Entity("Softtech.Models.Mar", b =>
                {
                    b.Property<int>("Total")
                        .HasColumnType("int")
                        .HasColumnName("Total");

                    b.ToTable("Mar");

                    b
                        .HasAnnotation("Relational:SqlQuery", "sp_MarStats");
                });

            modelBuilder.Entity("Softtech.Models.May", b =>
                {
                    b.Property<int>("Total")
                        .HasColumnType("int")
                        .HasColumnName("Total");

                    b.ToTable("May");

                    b
                        .HasAnnotation("Relational:SqlQuery", "sp_MaybStats");
                });

            modelBuilder.Entity("Softtech.Models.NO", b =>
                {
                    b.Property<int>("Total")
                        .HasColumnType("int")
                        .HasColumnName("Total");

                    b.ToTable("NO");

                    b
                        .HasAnnotation("Relational:SqlQuery", "sp_NovAppr");
                });

            modelBuilder.Entity("Softtech.Models.NOV", b =>
                {
                    b.Property<int>("Total")
                        .HasColumnType("int")
                        .HasColumnName("Total");

                    b.ToTable("NOV");

                    b
                        .HasAnnotation("Relational:SqlQuery", "sp_NovC");
                });

            modelBuilder.Entity("Softtech.Models.Nov", b =>
                {
                    b.Property<int>("Total")
                        .HasColumnType("int")
                        .HasColumnName("Total");

                    b.ToTable("Nov");

                    b
                        .HasAnnotation("Relational:SqlQuery", "sp_NovStats");
                });

            modelBuilder.Entity("Softtech.Models.OC", b =>
                {
                    b.Property<int>("Total")
                        .HasColumnType("int")
                        .HasColumnName("Total");

                    b.ToTable("OC");

                    b
                        .HasAnnotation("Relational:SqlQuery", "sp_OctAppr");
                });

            modelBuilder.Entity("Softtech.Models.OCT", b =>
                {
                    b.Property<int>("Total")
                        .HasColumnType("int")
                        .HasColumnName("Total");

                    b.ToTable("OCT");

                    b
                        .HasAnnotation("Relational:SqlQuery", "sp_OctC");
                });

            modelBuilder.Entity("Softtech.Models.Oct", b =>
                {
                    b.Property<int>("Total")
                        .HasColumnType("int")
                        .HasColumnName("Total");

                    b.ToTable("Oct");

                    b
                        .HasAnnotation("Relational:SqlQuery", "sp_OctStats");
                });

            modelBuilder.Entity("Softtech.Models.SE", b =>
                {
                    b.Property<int>("Total")
                        .HasColumnType("int")
                        .HasColumnName("Total");

                    b.ToTable("SE");

                    b
                        .HasAnnotation("Relational:SqlQuery", "sp_SepAppr");
                });

            modelBuilder.Entity("Softtech.Models.SEPT", b =>
                {
                    b.Property<int>("Total")
                        .HasColumnType("int")
                        .HasColumnName("Total");

                    b.ToTable("SEPT");

                    b
                        .HasAnnotation("Relational:SqlQuery", "sp_SepC");
                });

            modelBuilder.Entity("Softtech.Models.Sep", b =>
                {
                    b.Property<int>("Total")
                        .HasColumnType("int")
                        .HasColumnName("Total");

                    b.ToTable("Sep");

                    b
                        .HasAnnotation("Relational:SqlQuery", "sp_SeptStats");
                });

            modelBuilder.Entity("Softtech.Models.TblBooking", b =>
                {
                    b.Property<string>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("BursaryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CVV")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardHolder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExpiryMonth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpiryYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayAmount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RoomTypeId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("StudentFundedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("TermsAndConditions")
                        .HasColumnType("bit");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookingId");

                    b.HasIndex("RoomId");

                    b.HasIndex("RoomTypeId");

                    b.HasIndex("StudentId");

                    b.ToTable("TblBookings");
                });

            modelBuilder.Entity("Softtech.Models.TblCity", b =>
                {
                    b.Property<string>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CityId");

                    b.ToTable("TblCities");
                });

            modelBuilder.Entity("Softtech.Models.TblDeposit", b =>
                {
                    b.Property<string>("DepositId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DepositId");

                    b.HasIndex("StudentId");

                    b.ToTable("TblDeposits");
                });

            modelBuilder.Entity("Softtech.Models.TblFault", b =>
                {
                    b.Property<string>("FaultId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoomId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FaultId");

                    b.HasIndex("RoomId");

                    b.HasIndex("StudentId");

                    b.ToTable("TblFaults");
                });

            modelBuilder.Entity("Softtech.Models.TblInspection", b =>
                {
                    b.Property<string>("InspectionId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CheckPdfUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Condition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("InspectorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoomId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("InspectionId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("RoomId");

                    b.HasIndex("StudentId");

                    b.ToTable("TblInspections");
                });

            modelBuilder.Entity("Softtech.Models.TblPayment", b =>
                {
                    b.Property<string>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("AdminId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AmountPaid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Balance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PaymentId");

                    b.HasIndex("StudentId");

                    b.ToTable("TblPayments");
                });

            modelBuilder.Entity("Softtech.Models.TblReview", b =>
                {
                    b.Property<string>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reply")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReviewId");

                    b.HasIndex("StudentId");

                    b.ToTable("TblReviews");
                });

            modelBuilder.Entity("Softtech.Models.TblRoom", b =>
                {
                    b.Property<string>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomTypeId")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoomId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("TblRooms");
                });

            modelBuilder.Entity("Softtech.Models.TblRoomType", b =>
                {
                    b.Property<string>("RoomTypeId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoomTypeId");

                    b.ToTable("TblRoomTypes");
                });

            modelBuilder.Entity("Softtech.Models.TblVisitor", b =>
                {
                    b.Property<string>("VisitorId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<TimeSpan>("TimeIn")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("TimeOut")
                        .HasColumnType("time");

                    b.HasKey("VisitorId");

                    b.HasIndex("RoomId");

                    b.HasIndex("StudentId");

                    b.ToTable("TblVisitors");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Softtech.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Softtech.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Softtech.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Softtech.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Softtech.Models.ApplicationUser", b =>
                {
                    b.HasOne("Softtech.Models.TblRoom", "Room")
                        .WithMany("Students")
                        .HasForeignKey("RoomId");

                    b.HasOne("Softtech.Models.TblCity", null)
                        .WithMany("Users")
                        .HasForeignKey("TblCityCityId");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Softtech.Models.ApplicationUserRole", b =>
                {
                    b.HasOne("Softtech.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Softtech.Models.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId1");

                    b.HasOne("Softtech.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Softtech.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Softtech.Models.TblBooking", b =>
                {
                    b.HasOne("Softtech.Models.TblRoom", "Room")
                        .WithMany("TblBooking")
                        .HasForeignKey("RoomId");

                    b.HasOne("Softtech.Models.TblRoomType", "RoomType")
                        .WithMany("Bookings")
                        .HasForeignKey("RoomTypeId");

                    b.HasOne("Softtech.Models.ApplicationUser", "Student")
                        .WithMany("Booking")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("RoomType");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Softtech.Models.TblDeposit", b =>
                {
                    b.HasOne("Softtech.Models.ApplicationUser", "Student")
                        .WithMany("Deposits")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Softtech.Models.TblFault", b =>
                {
                    b.HasOne("Softtech.Models.TblRoom", "Room")
                        .WithMany("TblFault")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Softtech.Models.ApplicationUser", "Student")
                        .WithMany("Faults")
                        .HasForeignKey("StudentId");

                    b.Navigation("Room");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Softtech.Models.TblInspection", b =>
                {
                    b.HasOne("Softtech.Models.ApplicationUser", null)
                        .WithMany("Inspections")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Softtech.Models.ApplicationUser", "Inspector")
                        .WithMany("Inspectors")
                        .HasForeignKey("InspectorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Softtech.Models.TblRoom", "Room")
                        .WithMany("Inspections")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Softtech.Models.ApplicationUser", "Student")
                        .WithMany("StudentInspec")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Inspector");

                    b.Navigation("Room");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Softtech.Models.TblPayment", b =>
                {
                    b.HasOne("Softtech.Models.ApplicationUser", "Student")
                        .WithMany("Payments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Softtech.Models.TblReview", b =>
                {
                    b.HasOne("Softtech.Models.ApplicationUser", "Student")
                        .WithMany("Fines")
                        .HasForeignKey("StudentId");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Softtech.Models.TblRoom", b =>
                {
                    b.HasOne("Softtech.Models.TblRoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeId");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("Softtech.Models.TblVisitor", b =>
                {
                    b.HasOne("Softtech.Models.TblRoom", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Softtech.Models.ApplicationUser", "Student")
                        .WithMany("Visitors")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Softtech.Models.ApplicationRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Softtech.Models.ApplicationUser", b =>
                {
                    b.Navigation("Booking");

                    b.Navigation("Deposits");

                    b.Navigation("Faults");

                    b.Navigation("Fines");

                    b.Navigation("Inspections");

                    b.Navigation("Inspectors");

                    b.Navigation("Payments");

                    b.Navigation("StudentInspec");

                    b.Navigation("Visitors");
                });

            modelBuilder.Entity("Softtech.Models.TblCity", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Softtech.Models.TblRoom", b =>
                {
                    b.Navigation("Inspections");

                    b.Navigation("Students");

                    b.Navigation("TblBooking");

                    b.Navigation("TblFault");
                });

            modelBuilder.Entity("Softtech.Models.TblRoomType", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Rooms");
                });
#pragma warning restore 612, 618
        }
    }
}
